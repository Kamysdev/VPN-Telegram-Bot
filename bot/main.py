# vpn-telegram-bot/bot/main.py

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import CommandObject
from aiogram.types.input_file import FSInputFile

from config import BOT_TOKEN, ADMIN_ID
from db import init_db, add_or_update_user, log_message, get_all_users, add_access_for_user, get_user_status, get_user_by_username, get_user_info
from keyboards import main_button, payment_button


logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

init_db()

@dp.message(Command("start"))
async def start_handler(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or "unknown"
    add_or_update_user(telegram_id, username)

    is_active = get_user_status(telegram_id)  # True/False
    keyboard = main_button if is_active else payment_button

    photo = FSInputFile("media/welcome.jpg")
    await message.answer_photo(
        photo=photo,
        caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-—Å–µ—Ä–≤–∏—Å!\n –î–∞–ª—å—à–µ –∏–¥—ë—Ç –∑–∞–≥–ª—É—à–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ—á–∏–º. –ü–æ–∫–∞ —Ç–µ–∫—Å—Ç —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª :(",
        reply_markup=keyboard
    )


@dp.message(Command("broadcast"))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer(f"–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. \n{message.from_user.id}")

    text = message.text.removeprefix("/broadcast").strip()
    if not text:
        return await message.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

    users = get_all_users()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, f"<b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n{text}")
            count += 1
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(Command("addaccess"))
async def cmd_add_access(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    if not command.args:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addaccess @username –∫–ª—é—á")

    try:
        parts = command.args.split()
        if len(parts) < 2:
            return await message.answer("–§–æ—Ä–º–∞—Ç: /addaccess @username –∫–ª—é—á")

        username_part = parts[0]
        key = " ".join(parts[1:])

        username = username_part.lstrip('@')
        user = get_user_by_username(username)

        if not user:
            return await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        telegram_id = user["telegram_id"]

        add_access_for_user(telegram_id, key)

        await bot.send_message(
            chat_id=telegram_id,
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–æ—Ç —Ç–≤–æ–π –∫–ª—é—á –æ—Ç VPN:\n\n<code>{key}</code>",
            parse_mode=ParseMode.HTML,
        )

        await bot.send_message(
            chat_id=telegram_id,
            text="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_button
        )

        await message.answer(f"–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(F.photo)
async def handle_photo_receipt(message: Message):
    add_or_update_user(message.from_user.id, message.from_user.username)
    log_message(message.from_user.id, f"Photo: {message.photo[-1].file_id}")
    try:
        await bot.send_photo(
            ADMIN_ID,
            photo=message.photo[-1].file_id,
            caption=f"<b>–§–æ—Ç–æ-—á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username}"
        )
        await message.answer("–§–æ—Ç–æ —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text)
async def handle_text_receipt(message: Message):
    add_or_update_user(message.from_user.id, message.from_user.username)
    log_message(message.from_user.id, message.text)
    try:
        await bot.send_message(
            ADMIN_ID,
            f"<b>–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username}\n<pre>{message.text}</pre>"
        )
        await message.answer("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
