# vpn-telegram-bot/bot/main.py

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta


from config import BOT_TOKEN, ADMIN_ID
from db import init_db, add_or_update_user, log_message, get_all_users, add_access_for_user, get_user_status, get_user_by_username, get_user_info, get_all_users_with_due_date, extend_payment_by_telegram_id
from keyboards import main_button, home_page_button, undermenu_keyboard, FAQ_button
from states import ContactAdminStates

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

init_db()

@dp.message(Command("start"))
async def start_handler(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or "unknown"
    add_or_update_user(telegram_id, username)

    is_active = get_user_status(telegram_id)  # True/False
    keyboard = main_button if is_active else undermenu_keyboard

    photo = FSInputFile("media/welcome.jpg")
    await message.answer_photo(
        photo=photo,
        caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä–≤–∏—Å!\n –î–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 110–† –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <code>8-983-251-67-44</code> –°–±–µ—Ä–±–∞–Ω–∫ (–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–Ω–¥—Ä–µ–≤–∏—á –°), –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∫–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç (—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ). –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ  –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ—Å—Ç—É–ø",
        reply_markup=undermenu_keyboard
    )

@dp.message(Command("broadcast"))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer(f"–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. \n{message.from_user.id}")

    text = message.text.removeprefix("/broadcast").strip()
    if not text:
        return await message.answer("–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

    users = get_all_users()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, f"<b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n{text}")
            count += 1
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(Command("addaccess"))
async def cmd_add_access(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    if not command.args:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addaccess @username –∫–ª—é—á")

    try:
        parts = command.args.split()
        if len(parts) < 2:
            return await message.answer("–§–æ—Ä–º–∞—Ç: /addaccess @username –∫–ª—é—á")

        username_part = parts[0]
        key = " ".join(parts[1:])

        username = username_part.lstrip('@')
        user = get_user_by_username(username)

        if not user:
            return await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        telegram_id = user["telegram_id"]

        add_access_for_user(telegram_id, key)

        await bot.send_message(
            chat_id=telegram_id,
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–æ—Ç —Ç–≤–æ–π –∫–ª—é—á –æ—Ç VPN:\n\n<code>{key}</code>",
            parse_mode=ParseMode.HTML,
        )

        await bot.send_message(
            chat_id=telegram_id,
            text="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_button
        )

        await message.answer(f"–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("extend"))
async def handle_extend_by_username(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.strip().split()
    if len(args) != 2 or not args[1].startswith("@"):
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /extend @username")
        return

    username = args[1][1:]  # —É–±–∏—Ä–∞–µ–º "@"

    user = get_user_by_username(username)
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        extend_payment_by_telegram_id(user['telegram_id'])
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü.")
        await bot.send_message(user['telegram_id'], "üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–æ–¥–ª—ë–Ω –µ—â—ë –Ω–∞ –º–µ—Å—è—Ü!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ @{username}: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞.")

## Test build
@dp.message(Command("test_notify"))
async def test_notify(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer(f"–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. \n{message.from_user.id}")
    await message.answer("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞.")
    await check_payment_reminders(bot)  # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

## –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å –∫–ª—é—á–æ–º –í–ü–ù)
@dp.callback_query(lambda c: c.data == "home_page")
async def show_home_page(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    info = get_user_info(telegram_id)

    if info:
        msg = (
            f"üè† *–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞*\n\n"
            f"üîë –í–∞—à VPN –∫–ª—é—á: `{info['vpn_key']}`\n"
            f"üìÖ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: *{info['payment_due'].strftime('%d.%m.%Y')}*"
        )
    else:
        msg = "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    await callback.message.edit_text(msg, reply_markup=home_page_button, parse_mode="Markdown")
    await callback.answer()

## –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º—ã
@dp.callback_query(lambda c: c.data == "report_problem")
async def report_issue(callback: CallbackQuery):
    user = callback.from_user
    username = f"@{user.username}" if user.username else f"ID: {user.id}"

    await bot.send_message(
        ADMIN_ID,
        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."
    )

    await callback.message.edit_text("üõ† –°–ø–∞—Å–∏–±–æ, –ø—Ä–æ–±–ª–µ–º–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! ü§ó", reply_markup=home_page_button, parse_mode="Markdown")
    await callback.answer()

## –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    is_active = get_user_status(telegram_id)

    keyboard = main_button if is_active else undermenu_keyboard

    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-—Å–µ—Ä–≤–∏—Å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=keyboard)
    await callback.answer()

## –ò–Ω–ª–∞–π–Ω –º–µ–Ω—é
@dp.message(F.text == "üìã –ú–µ–Ω—é")
async def handle_reply_menu(message: Message):
    telegram_id = message.from_user.id
    is_active = get_user_status(telegram_id)
    keyboard = main_button if is_active else undermenu_keyboard

    if is_active:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-—Å–µ—Ä–≤–∏—Å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=keyboard)

## –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
@dp.message(F.text == "üõ† –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def contact_admin_button_pressed(message: Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤—Å—ë –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–µ—Ä–∂–∫–µ.")
    await state.set_state(ContactAdminStates.waiting_for_message)

@dp.message(ContactAdminStates.waiting_for_message)
async def handle_admin_message(message: Message, state: FSMContext):
    user = message.from_user
    text = (
        f"üì® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or 'unknown'} (ID: {user.id}):\n\n"
        f"{message.text}"
    )
    await bot.send_message(ADMIN_ID, text)
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query(lambda c: c.data == "support")
async def support_callback(callback: CallbackQuery):
    await callback.message.edit_text("üõü –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=FAQ_button)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "faq")
async def support_callback(callback: CallbackQuery):
    await callback.message.edit_text("A. –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN? " \
    "\n–ë. –ê–±—Å–æ–ª—é—Ç–Ω–æ! –°–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ï–≤—Ä–æ–ø–µ, –∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤", reply_markup=home_page_button)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "connect_to_vpn")
async def support_callback(callback: CallbackQuery):
    await callback.message.edit_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Outline –∏–ª–∏ AmneziaVPN", reply_markup=home_page_button)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "speedtest")
async def support_callback(callback: CallbackQuery):
    await callback.message.edit_text("üõ∏ speedtest.net", reply_markup=home_page_button)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "troubleshooting")
async def support_callback(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ VPN. –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º VPN –≤ 2-2.5 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ, —á–µ–º –±–µ–∑ –Ω–µ–≥–æ, —Ç–æ –≤—Å—ë –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã", reply_markup=home_page_button)
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–æ–≤. –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
@dp.message(F.photo)
async def handle_photo_receipt(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or "unknown"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_or_update_user(telegram_id, username)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    is_active = get_user_status(telegram_id)

    # –õ–æ–≥–∏—Ä—É–µ–º
    log_message(telegram_id, f"Photo: {message.photo[-1].file_id}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    photo_file_id = message.photo[-1].file_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if is_active:
        admin_caption = f"üì§ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (id: {telegram_id})"
        user_response = "‚úÖ –í–∞—à —á–µ–∫ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
    else:
        admin_caption = f"üÜï –ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (id: {telegram_id})"
        user_response = "‚úÖ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø."

    try:
        await bot.send_photo(
            chat_id=ADMIN_ID,
            photo=photo_file_id,
            caption=admin_caption
        )
        await message.answer(user_response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# @dp.message(F.text)
# async def handle_text_receipt(message: Message):
#     add_or_update_user(message.from_user.id, message.from_user.username)
#     log_message(message.from_user.id, message.text)
#     try:
#         await bot.send_message(
#             ADMIN_ID,
#             f"<b>–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username}\n<pre>{message.text}</pre>"
#         )
#         await message.answer("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


## –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
async def check_payment_reminders(bot: Bot):
    while True:
        users_to_notify = get_all_users_with_due_date(3)

        if not users_to_notify:
            await bot.send_message(
                ADMIN_ID,
                "‚úÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–ª–∞—Ç–µ–∂–µ."
            )
        else:
            report_lines = [f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"]
            for user in users_to_notify:
                report_lines.append(f"‚û°Ô∏è ID: {user['telegram_id']} | –î–æ: {user['payment_due']}")

                await bot.send_message(
                    user['telegram_id'],
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π VPN-–ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {user['payment_due']}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä <code>8-983-251-67-44</code> –°–±–µ—Ä–±–∞–Ω–∫ (–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á –°) –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Ç"
                )

            await bot.send_message(
                ADMIN_ID,
                "\n".join(report_lines)
            )

        await asyncio.sleep(86400)  # –ø–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

async def on_startup(bot: Bot):
    asyncio.create_task(check_payment_reminders(bot))

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())